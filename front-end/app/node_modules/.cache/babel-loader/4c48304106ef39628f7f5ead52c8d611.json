{"remainingRequest":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\src\\components\\UserActivities.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\src\\components\\UserActivities.vue","mtime":1635333945297},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\babel.config.js","mtime":1635333945277},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639160574026},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1639160574342},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639160574026},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1639160574788}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport apiRequests from \"../javascript/apiRequests.js\";\nimport errorHandling from \"./../javascript/errorHandling.js\";\nexport default {\n  name: \"userActivities\",\n  methods: {\n    loadUserActivities: function loadUserActivities() {\n      var _this = this;\n\n      apiRequests.getRequestToApiWithAuthorization('/api/usersPosts').then(function (response) {\n        _this.userPosts = response.data;\n      }).catch(function () {//localStorage.removeItem(\"Authorization\");\n        //this.$router.push(\"/\");\n      });\n      apiRequests.getRequestToApiWithAuthorization('/api/usersReplies').then(function (response) {\n        _this.userReplies = response.data;\n      }).catch(function () {//localStorage.removeItem(\"Authorization\");\n        //this.$router.push(\"/\");\n      });\n    },\n    deletePost: function deletePost(postId) {\n      var _this2 = this;\n\n      apiRequests.deleteRequestWithAuthorization('/api/delete/post/' + postId).then(function () {\n        _this2.loadUserActivities();\n      }).catch(function () {//errorHandling.errorMsgWithButton(\"Failed to delete this post!\");\n        //localStorage.removeItem(\"Authorization\");\n        //this.$router.push(\"/\");\n      });\n    },\n    deleteReply: function deleteReply(replyId) {\n      var _this3 = this;\n\n      apiRequests.deleteRequestWithAuthorization('/api/delete/reply/' + replyId).then(function () {\n        _this3.loadUserActivities();\n      }).catch(function () {\n        errorHandling.errorMsgWithButton(\"Failed to delete this reply!\");\n      });\n    },\n    enableEditingReply: function enableEditingReply(data) {\n      this.tempValue = data.reply;\n      this.editingReply = data.id;\n    },\n    enableEditingPost: function enableEditingPost(data) {\n      this.newTitle = data.title;\n      this.newDescription = data.description;\n      this.editingPost = data.id;\n    },\n    disableEditingReply: function disableEditingReply() {\n      this.tempValue = null;\n      this.editingReply = false;\n    },\n    disableEditingPost: function disableEditingPost() {\n      this.newTitle = null;\n      this.newDescription = null;\n      this.editingPost = false;\n    },\n    saveEditReply: function saveEditReply(index, replyId) {\n      var _this4 = this;\n\n      this.$validator.validate().then(function (valid) {\n        if (!valid) {\n          errorHandling.errorMsg(\"These changes are forbidden!\", 1000);\n        } else {\n          _this4.userReplies[index].reply = _this4.tempValue;\n          apiRequests.patchRequestWithAuthorization('/api/edit/reply/' + replyId, {\n            reply: _this4.tempValue\n          }).catch(function () {\n            errorHandling.errorMsgWithButton(\"Failed to update this reply!\");\n          });\n\n          _this4.disableEditingReply();\n        }\n      });\n    },\n    saveEditPost: function saveEditPost(index, postId) {\n      var _this5 = this;\n\n      this.$validator.validate().then(function (valid) {\n        if (!valid) {\n          errorHandling.errorMsg(\"These changes are forbidden!\", 1000);\n        } else {\n          _this5.userPosts[index].title = _this5.newTitle;\n          _this5.userPosts[index].description = _this5.newDescription;\n          apiRequests.patchRequestWithAuthorization('/api/edit/post/' + postId, {\n            title: _this5.newTitle,\n            description: _this5.newDescription\n          }).catch(function () {\n            errorHandling.errorMsgWithButton(\"Failed to update this post!\");\n          });\n\n          _this5.disableEditingPost();\n        }\n      });\n    }\n  },\n  data: function data() {\n    return {\n      userPosts: [],\n      userReplies: [],\n      tempValue: null,\n      newTitle: null,\n      newDescription: null,\n      editingReply: false,\n      editingPost: false\n    };\n  },\n  mounted: function mounted() {\n    this.loadUserActivities();\n  }\n};",{"version":3,"sources":["UserActivities.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col-xl-7 col-lg-8 col-md-9 col-sm-11\">\r\n\r\n        <h2 class=\"my-2\">My Posts</h2>\r\n\r\n        <div class=\"post-list-item my-2 p-2 text-left\" v-for=\"(data, index) in userPosts\" :key='data.id'>\r\n          <h3>{{data.title}}</h3>\r\n          <p>{{data.description}}</p>\r\n          <div class=\"form-group mx-4 mb-2\" v-if=\"editingPost === data.id\">\r\n            <input class=\"form-control mb-2\" name=\"newTitle\" v-bind:id=\"data.title + 2\"\r\n                   v-model=\"newTitle\" v-validate=\"{ required: true, min: 3, max: 128 }\">\r\n            <div class=\"error\" v-if=\"errors.has('newTitle')\">{{errors.first('newTitle')}}</div>\r\n            <textarea class=\"form-control mb-2\" rows=\"3\" name=\"newDescription\" v-bind:id=\"data.title + 3\"\r\n                      v-model=\"newDescription\" v-validate=\"{ required: true, min: 5 }\"></textarea>\r\n            <div class=\"error\" v-if=\"errors.has('newDescription')\">{{errors.first('newDescription')}}</div>\r\n            <button class=\"btn btn-primary m-1\" @click=\"saveEditPost(index, data.id)\" v-bind:id=\"data.title + 4\">Save\r\n            </button>\r\n            <button class=\"btn btn-secondary m-1\" @click=\"disableEditingPost\" v-bind:id=\"data.title + 5\">Cancel</button>\r\n          </div>\r\n          <button class=\"btn btn-danger m-1\" type=\"submit\" v-bind:id=\"data.title + 1\"\r\n                  @click=\"deletePost(data.id)\">Delete\r\n          </button>\r\n          <button class=\"btn btn-warning m-1\" type=\"submit\" v-bind:id=\"data.title\"\r\n                  @click=\"enableEditingPost(data)\">Edit\r\n          </button>\r\n        </div>\r\n\r\n        <h2 class=\"my-2\">My Replies</h2>\r\n\r\n        <div class=\"post-list-item my-2 p-2 text-left\" v-for=\"(data, index) in userReplies\" :key='data.id'>\r\n          <p>{{data.reply}}</p>\r\n          <div class=\"form-group mx-4 mb-2\" v-if=\"editingReply === data.id\">\r\n            <textarea class=\"form-control mb-2\" rows=\"3\" name=\"newReply\"\r\n                      v-model=\"tempValue\" v-validate=\"{ required: true, min: 5 }\"></textarea>\r\n            <div class=\"error\" v-if=\"errors.has('newReply')\">{{errors.first('newReply')}}</div>\r\n            <button class=\"btn btn-primary m-1\" @click=\"saveEditReply(index, data.id)\"> Save</button>\r\n            <button class=\"btn btn-secondary m-1\" @click=\"disableEditingReply\"> Cancel</button>\r\n          </div>\r\n          <button class=\"btn btn-danger m-1\" type=\"submit\" @click=\"deleteReply(data.id)\">Delete</button>\r\n          <button class=\"btn btn-warning m-1\" type=\"submit\" @click=\"enableEditingReply(data)\">Edit</button>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n    import apiRequests from '../javascript/apiRequests.js';\r\n    import errorHandling from './../javascript/errorHandling.js';\r\n\r\n    export default {\r\n        name: \"userActivities\",\r\n        methods: {\r\n            loadUserActivities() {\r\n                apiRequests\r\n                    .getRequestToApiWithAuthorization('/api/usersPosts')\r\n                    .then((response) => {\r\n                        this.userPosts = response.data;\r\n                    })\r\n                    .catch(() => {\r\n                            //localStorage.removeItem(\"Authorization\");\r\n                            //this.$router.push(\"/\");\r\n                        }\r\n                    );\r\n                apiRequests\r\n                    .getRequestToApiWithAuthorization('/api/usersReplies')\r\n                    .then((response) => {\r\n                        this.userReplies = response.data;\r\n                    })\r\n                    .catch(() => {\r\n                            //localStorage.removeItem(\"Authorization\");\r\n                            //this.$router.push(\"/\");\r\n                        }\r\n                    );\r\n            },\r\n            deletePost(postId) {\r\n                apiRequests\r\n                    .deleteRequestWithAuthorization('/api/delete/post/' + postId)\r\n                    .then(() => {\r\n                        this.loadUserActivities();\r\n                    })\r\n                    .catch(() => {\r\n                            //errorHandling.errorMsgWithButton(\"Failed to delete this post!\");\r\n                            //localStorage.removeItem(\"Authorization\");\r\n                            //this.$router.push(\"/\");\r\n                        }\r\n                    );\r\n            },\r\n            deleteReply(replyId) {\r\n                apiRequests\r\n                    .deleteRequestWithAuthorization('/api/delete/reply/' + replyId)\r\n                    .then(() => {\r\n                        this.loadUserActivities();\r\n                    })\r\n                    .catch(() => {\r\n                            errorHandling.errorMsgWithButton(\"Failed to delete this reply!\")\r\n                        }\r\n                    );\r\n            },\r\n            enableEditingReply(data) {\r\n                this.tempValue = data.reply;\r\n                this.editingReply = data.id;\r\n            },\r\n            enableEditingPost(data) {\r\n                this.newTitle = data.title;\r\n                this.newDescription = data.description;\r\n                this.editingPost = data.id;\r\n            },\r\n            disableEditingReply: function () {\r\n                this.tempValue = null;\r\n                this.editingReply = false;\r\n            },\r\n            disableEditingPost: function () {\r\n                this.newTitle = null;\r\n                this.newDescription = null;\r\n                this.editingPost = false;\r\n            },\r\n            saveEditReply(index, replyId) {\r\n                this.$validator.validate().then(valid => {\r\n                    if (!valid) {\r\n                        errorHandling.errorMsg(\"These changes are forbidden!\", 1000);\r\n                    } else {\r\n                        this.userReplies[index].reply = this.tempValue;\r\n                        apiRequests\r\n                            .patchRequestWithAuthorization('/api/edit/reply/' + replyId, {\r\n                                reply: this.tempValue\r\n                            })\r\n                            .catch(() => {\r\n                                    errorHandling.errorMsgWithButton(\"Failed to update this reply!\")\r\n                                }\r\n                            );\r\n                        this.disableEditingReply();\r\n                    }\r\n                });\r\n            },\r\n            saveEditPost(index, postId) {\r\n                this.$validator.validate().then(valid => {\r\n                    if (!valid) {\r\n                        errorHandling.errorMsg(\"These changes are forbidden!\", 1000);\r\n                    } else {\r\n                        this.userPosts[index].title = this.newTitle;\r\n                        this.userPosts[index].description = this.newDescription;\r\n                        apiRequests\r\n                            .patchRequestWithAuthorization('/api/edit/post/' + postId, {\r\n                                title: this.newTitle,\r\n                                description: this.newDescription\r\n                            })\r\n                            .catch(() => {\r\n                                    errorHandling.errorMsgWithButton(\"Failed to update this post!\")\r\n                                }\r\n                            );\r\n                        this.disableEditingPost();\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                userPosts: [],\r\n                userReplies: [],\r\n                tempValue: null,\r\n                newTitle: null,\r\n                newDescription: null,\r\n                editingReply: false,\r\n                editingPost: false\r\n            };\r\n        },\r\n        mounted() {\r\n            this.loadUserActivities();\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n  .post-list-item {\r\n    background-color: #f9f9f9;\r\n    border-left: 4px solid #e9e9e9;\r\n  }\r\n</style>\r\n\r\n"],"sourceRoot":"src/components"}]}