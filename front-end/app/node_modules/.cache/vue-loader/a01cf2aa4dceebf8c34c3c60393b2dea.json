{"remainingRequest":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\src\\components\\AddPost.vue?vue&type=template&id=ee2bb33e&scoped=true&","dependencies":[{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\src\\components\\AddPost.vue","mtime":1635333945295},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639160574026},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1639160575825},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639160574026},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1639160574788}],"contextDependencies":[],"result":["var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"container-fluid\" }, [\n    _c(\"div\", { staticClass: \"row justify-content-center\" }, [\n      _c(\"div\", { staticClass: \"col-xl-5 col-lg-6 col-md-8 col-sm-11\" }, [\n        _c(\"h3\", [_vm._v(\"Create a task for others to solve!\")]),\n        _c(\n          \"form\",\n          {\n            attrs: { id: \"post-form\" },\n            on: {\n              submit: function ($event) {\n                $event.preventDefault()\n                return _vm.processForm.apply(null, arguments)\n              },\n            },\n          },\n          [\n            _c(\"div\", { staticClass: \"form-group text-left\" }, [\n              _c(\"label\", { attrs: { for: \"topic\" } }, [_vm._v(\"Topic:\")]),\n              _c(\n                \"select\",\n                {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.topic,\n                      expression: \"topic\",\n                    },\n                    {\n                      name: \"validate\",\n                      rawName: \"v-validate\",\n                      value: { required: true },\n                      expression: \"{ required: true }\",\n                    },\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: { id: \"topic\", name: \"topic\" },\n                  on: {\n                    change: function ($event) {\n                      var $$selectedVal = Array.prototype.filter\n                        .call($event.target.options, function (o) {\n                          return o.selected\n                        })\n                        .map(function (o) {\n                          var val = \"_value\" in o ? o._value : o.value\n                          return val\n                        })\n                      _vm.topic = $event.target.multiple\n                        ? $$selectedVal\n                        : $$selectedVal[0]\n                    },\n                  },\n                },\n                [\n                  _c(\"option\", { attrs: { value: \"Mathematics\" } }, [\n                    _vm._v(\"Mathematics\"),\n                  ]),\n                  _c(\"option\", { attrs: { value: \"Physics\" } }, [\n                    _vm._v(\"Physics\"),\n                  ]),\n                  _c(\"option\", { attrs: { value: \"Chemistry\" } }, [\n                    _vm._v(\"Chemistry\"),\n                  ]),\n                  _c(\"option\", { attrs: { value: \"Biology\" } }, [\n                    _vm._v(\"Biology\"),\n                  ]),\n                  _c(\"option\", { attrs: { value: \"Computer_Science\" } }, [\n                    _vm._v(\"Computer Science\"),\n                  ]),\n                  _c(\n                    \"option\",\n                    { attrs: { value: \"Varia\", selected: \"selected\" } },\n                    [_vm._v(\"Varia\")]\n                  ),\n                ]\n              ),\n              _vm.errors.has(\"topic\")\n                ? _c(\"div\", { staticClass: \"error\" }, [\n                    _vm._v(_vm._s(_vm.errors.first(\"topic\"))),\n                  ])\n                : _vm._e(),\n            ]),\n            _c(\"div\", { staticClass: \"form-group text-left\" }, [\n              _c(\"label\", { attrs: { for: \"title\" } }, [_vm._v(\"Title:\")]),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.title,\n                    expression: \"title\",\n                  },\n                  {\n                    name: \"validate\",\n                    rawName: \"v-validate\",\n                    value: { required: true, min: 3, max: 128 },\n                    expression: \"{ required: true, min: 3, max: 128 }\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  id: \"title\",\n                  type: \"text\",\n                  name: \"title\",\n                  placeholder: \"Title\",\n                },\n                domProps: { value: _vm.title },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.title = $event.target.value\n                  },\n                },\n              }),\n              _vm.errors.has(\"title\")\n                ? _c(\"div\", { staticClass: \"error\" }, [\n                    _vm._v(_vm._s(_vm.errors.first(\"title\"))),\n                  ])\n                : _vm._e(),\n            ]),\n            _c(\"div\", { staticClass: \"form-group text-left\" }, [\n              _c(\"label\", { attrs: { for: \"description\" } }, [\n                _vm._v(\"Description:\"),\n              ]),\n              _c(\"textarea\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.description,\n                    expression: \"description\",\n                  },\n                  {\n                    name: \"validate\",\n                    rawName: \"v-validate\",\n                    value: { required: true, min: 5 },\n                    expression: \"{ required: true, min: 5 }\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  id: \"description\",\n                  rows: \"3\",\n                  name: \"description\",\n                  placeholder: \"Description\",\n                  onkeydown: \"{if(event.keyCode === 13) return false;}\",\n                },\n                domProps: { value: _vm.description },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.description = $event.target.value\n                  },\n                },\n              }),\n              _vm.errors.has(\"description\")\n                ? _c(\"div\", { staticClass: \"error\" }, [\n                    _vm._v(_vm._s(_vm.errors.first(\"description\"))),\n                  ])\n                : _vm._e(),\n            ]),\n            _c(\"div\", { staticClass: \"form-group text-left\" }, [\n              _c(\"label\", { attrs: { for: \"reward_description\" } }, [\n                _vm._v(\"Reward description:\"),\n              ]),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.reward_description,\n                    expression: \"reward_description\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  id: \"reward_description\",\n                  type: \"text\",\n                  name: \"reward_description\",\n                  placeholder: \"Reward description\",\n                },\n                domProps: { value: _vm.reward_description },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.reward_description = $event.target.value\n                  },\n                },\n              }),\n            ]),\n            _c(\"div\", { staticClass: \"form-group text-left\" }, [\n              _c(\"label\", { attrs: { for: \"fileUpload\" } }, [_vm._v(\"File:\")]),\n              _c(\"br\"),\n              _c(\n                \"label\",\n                {\n                  staticClass: \"custom-file-upload\",\n                  attrs: { for: \"fileUpload\" },\n                },\n                [_vm._v(\"\\n            Choose a file\\n          \")]\n              ),\n              _c(\"input\", {\n                staticClass: \"form-control-file\",\n                attrs: { type: \"file\", id: \"fileUpload\" },\n                on: { change: _vm.loadTextFromFile },\n              }),\n              _vm._m(0),\n            ]),\n            _c(\"input\", {\n              staticClass: \"btn btn-lg btn-primary mb-3\",\n              attrs: { type: \"submit\", value: \"Submit\" },\n            }),\n          ]\n        ),\n      ]),\n    ]),\n  ])\n}\nvar staticRenderFns = [\n  function () {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"small\", [\n        _vm._v(\"\\n              Max file size: 20MB \"),\n        _c(\"br\"),\n        _vm._v(\n          \"\\n              Allowed file types: .txt, .pdf, .png, .jpg, .doc, .docx, .xls, .xlsx, .rtf, .jpeg, .tiff, .ppt\\n            \"\n        ),\n      ]),\n    ])\n  },\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}