{"remainingRequest":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\src\\components\\UserActivities.vue?vue&type=style&index=0&id=f48a7770&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\src\\components\\UserActivities.vue","mtime":1635333945297},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\css-loader\\index.js","mtime":1639160572603},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1639160575715},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\postcss-loader\\src\\index.js","mtime":1639160574338},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639160574026},{"path":"C:\\Users\\alvar\\Desktop\\downloadhS4qe074722\\assignment_v1.1\\front-end\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1639160574788}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.post-list-item {\n  background-color: #f9f9f9;\n  border-left: 4px solid #e9e9e9;\n}\n",{"version":3,"sources":["UserActivities.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLA;AACA;AACA;AACA","file":"UserActivities.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col-xl-7 col-lg-8 col-md-9 col-sm-11\">\r\n\r\n        <h2 class=\"my-2\">My Posts</h2>\r\n\r\n        <div class=\"post-list-item my-2 p-2 text-left\" v-for=\"(data, index) in userPosts\" :key='data.id'>\r\n          <h3>{{data.title}}</h3>\r\n          <p>{{data.description}}</p>\r\n          <div class=\"form-group mx-4 mb-2\" v-if=\"editingPost === data.id\">\r\n            <input class=\"form-control mb-2\" name=\"newTitle\" v-bind:id=\"data.title + 2\"\r\n                   v-model=\"newTitle\" v-validate=\"{ required: true, min: 3, max: 128 }\">\r\n            <div class=\"error\" v-if=\"errors.has('newTitle')\">{{errors.first('newTitle')}}</div>\r\n            <textarea class=\"form-control mb-2\" rows=\"3\" name=\"newDescription\" v-bind:id=\"data.title + 3\"\r\n                      v-model=\"newDescription\" v-validate=\"{ required: true, min: 5 }\"></textarea>\r\n            <div class=\"error\" v-if=\"errors.has('newDescription')\">{{errors.first('newDescription')}}</div>\r\n            <button class=\"btn btn-primary m-1\" @click=\"saveEditPost(index, data.id)\" v-bind:id=\"data.title + 4\">Save\r\n            </button>\r\n            <button class=\"btn btn-secondary m-1\" @click=\"disableEditingPost\" v-bind:id=\"data.title + 5\">Cancel</button>\r\n          </div>\r\n          <button class=\"btn btn-danger m-1\" type=\"submit\" v-bind:id=\"data.title + 1\"\r\n                  @click=\"deletePost(data.id)\">Delete\r\n          </button>\r\n          <button class=\"btn btn-warning m-1\" type=\"submit\" v-bind:id=\"data.title\"\r\n                  @click=\"enableEditingPost(data)\">Edit\r\n          </button>\r\n        </div>\r\n\r\n        <h2 class=\"my-2\">My Replies</h2>\r\n\r\n        <div class=\"post-list-item my-2 p-2 text-left\" v-for=\"(data, index) in userReplies\" :key='data.id'>\r\n          <p>{{data.reply}}</p>\r\n          <div class=\"form-group mx-4 mb-2\" v-if=\"editingReply === data.id\">\r\n            <textarea class=\"form-control mb-2\" rows=\"3\" name=\"newReply\"\r\n                      v-model=\"tempValue\" v-validate=\"{ required: true, min: 5 }\"></textarea>\r\n            <div class=\"error\" v-if=\"errors.has('newReply')\">{{errors.first('newReply')}}</div>\r\n            <button class=\"btn btn-primary m-1\" @click=\"saveEditReply(index, data.id)\"> Save</button>\r\n            <button class=\"btn btn-secondary m-1\" @click=\"disableEditingReply\"> Cancel</button>\r\n          </div>\r\n          <button class=\"btn btn-danger m-1\" type=\"submit\" @click=\"deleteReply(data.id)\">Delete</button>\r\n          <button class=\"btn btn-warning m-1\" type=\"submit\" @click=\"enableEditingReply(data)\">Edit</button>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n    import apiRequests from '../javascript/apiRequests.js';\r\n    import errorHandling from './../javascript/errorHandling.js';\r\n\r\n    export default {\r\n        name: \"userActivities\",\r\n        methods: {\r\n            loadUserActivities() {\r\n                apiRequests\r\n                    .getRequestToApiWithAuthorization('/api/usersPosts')\r\n                    .then((response) => {\r\n                        this.userPosts = response.data;\r\n                    })\r\n                    .catch(() => {\r\n                            //localStorage.removeItem(\"Authorization\");\r\n                            //this.$router.push(\"/\");\r\n                        }\r\n                    );\r\n                apiRequests\r\n                    .getRequestToApiWithAuthorization('/api/usersReplies')\r\n                    .then((response) => {\r\n                        this.userReplies = response.data;\r\n                    })\r\n                    .catch(() => {\r\n                            //localStorage.removeItem(\"Authorization\");\r\n                            //this.$router.push(\"/\");\r\n                        }\r\n                    );\r\n            },\r\n            deletePost(postId) {\r\n                apiRequests\r\n                    .deleteRequestWithAuthorization('/api/delete/post/' + postId)\r\n                    .then(() => {\r\n                        this.loadUserActivities();\r\n                    })\r\n                    .catch(() => {\r\n                            //errorHandling.errorMsgWithButton(\"Failed to delete this post!\");\r\n                            //localStorage.removeItem(\"Authorization\");\r\n                            //this.$router.push(\"/\");\r\n                        }\r\n                    );\r\n            },\r\n            deleteReply(replyId) {\r\n                apiRequests\r\n                    .deleteRequestWithAuthorization('/api/delete/reply/' + replyId)\r\n                    .then(() => {\r\n                        this.loadUserActivities();\r\n                    })\r\n                    .catch(() => {\r\n                            errorHandling.errorMsgWithButton(\"Failed to delete this reply!\")\r\n                        }\r\n                    );\r\n            },\r\n            enableEditingReply(data) {\r\n                this.tempValue = data.reply;\r\n                this.editingReply = data.id;\r\n            },\r\n            enableEditingPost(data) {\r\n                this.newTitle = data.title;\r\n                this.newDescription = data.description;\r\n                this.editingPost = data.id;\r\n            },\r\n            disableEditingReply: function () {\r\n                this.tempValue = null;\r\n                this.editingReply = false;\r\n            },\r\n            disableEditingPost: function () {\r\n                this.newTitle = null;\r\n                this.newDescription = null;\r\n                this.editingPost = false;\r\n            },\r\n            saveEditReply(index, replyId) {\r\n                this.$validator.validate().then(valid => {\r\n                    if (!valid) {\r\n                        errorHandling.errorMsg(\"These changes are forbidden!\", 1000);\r\n                    } else {\r\n                        this.userReplies[index].reply = this.tempValue;\r\n                        apiRequests\r\n                            .patchRequestWithAuthorization('/api/edit/reply/' + replyId, {\r\n                                reply: this.tempValue\r\n                            })\r\n                            .catch(() => {\r\n                                    errorHandling.errorMsgWithButton(\"Failed to update this reply!\")\r\n                                }\r\n                            );\r\n                        this.disableEditingReply();\r\n                    }\r\n                });\r\n            },\r\n            saveEditPost(index, postId) {\r\n                this.$validator.validate().then(valid => {\r\n                    if (!valid) {\r\n                        errorHandling.errorMsg(\"These changes are forbidden!\", 1000);\r\n                    } else {\r\n                        this.userPosts[index].title = this.newTitle;\r\n                        this.userPosts[index].description = this.newDescription;\r\n                        apiRequests\r\n                            .patchRequestWithAuthorization('/api/edit/post/' + postId, {\r\n                                title: this.newTitle,\r\n                                description: this.newDescription\r\n                            })\r\n                            .catch(() => {\r\n                                    errorHandling.errorMsgWithButton(\"Failed to update this post!\")\r\n                                }\r\n                            );\r\n                        this.disableEditingPost();\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                userPosts: [],\r\n                userReplies: [],\r\n                tempValue: null,\r\n                newTitle: null,\r\n                newDescription: null,\r\n                editingReply: false,\r\n                editingPost: false\r\n            };\r\n        },\r\n        mounted() {\r\n            this.loadUserActivities();\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n  .post-list-item {\r\n    background-color: #f9f9f9;\r\n    border-left: 4px solid #e9e9e9;\r\n  }\r\n</style>\r\n\r\n"]}]}