{"remainingRequest":"C:\\Users\\alvar\\Desktop\\Staff\\My Projects\\dentistapp\\front-end\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\alvar\\Desktop\\Staff\\My Projects\\dentistapp\\front-end\\app\\src\\components\\ResetPassword.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\alvar\\Desktop\\Staff\\My Projects\\dentistapp\\front-end\\app\\src\\components\\ResetPassword.vue","mtime":1656431639653},{"path":"C:\\Users\\alvar\\Desktop\\Staff\\My Projects\\dentistapp\\front-end\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656431599999},{"path":"C:\\Users\\alvar\\Desktop\\Staff\\My Projects\\dentistapp\\front-end\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":1656431598858},{"path":"C:\\Users\\alvar\\Desktop\\Staff\\My Projects\\dentistapp\\front-end\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656431599999},{"path":"C:\\Users\\alvar\\Desktop\\Staff\\My Projects\\dentistapp\\front-end\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":1656431637646}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport apiRequests from './../javascript/apiRequests.js';\nimport errorHandling from './../javascript/errorHandling.js';\n\nexport default {\n    name: \"PasswordReset\",\n    data() {\n        return {\n            username: '',\n            token: '',\n            newPassword: '',\n            matchingPassword: '',\n        };\n    },\n    methods: {\n        register() {\n            apiRequests\n                .postRequestToApi('/api/resetPassword', {\n                    username: this.username,\n                    token: this.token,\n                    newPassword: this.newPassword,\n                })\n                .then(() => {\n                    this.resetFields();\n                    errorHandling.successMsg(\"Password changed!\", 1000);\n                })\n                .catch((error) => {\n                        errorHandling.errorMsg(error.response.data.message, 1200)\n                    }\n                );\n        },\n        resetFields() {\n            this.username = '';\n            this.newPassword = '';\n            this.matchingPassword = '';\n            this.token = '';\n            this.$nextTick(() => this.$validator.reset());\n        },\n        processForm() {\n            this.$validator.validate().then(valid => {\n                if (valid) {\n                    this.register();\n                } else {\n                    errorHandling.errorMsg(\"The form wasn't filled in properly!\", 1000);\n                }\n            });\n        }\n    },\n    mounted() {\n        this.username = this.$route.query.username;\n        this.token = this.$route.query.token;\n    }\n}\n",{"version":3,"sources":["ResetPassword.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ResetPassword.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col-xl-5 col-lg-6 col-md-8 col-sm-11\">\r\n\r\n        <h5>Password reset form for user {{username}}</h5>\r\n        <form id=\"post-form\" @submit.prevent=\"processForm\">\r\n\r\n          <div class=\"form-group text-left\">\r\n            <label for=\"password\">New password:</label>\r\n            <input id=\"password\" class=\"form-control\" type=\"password\" name=\"newPassword\" placeholder=\"Password\"\r\n                   v-model=\"newPassword\" v-validate=\"{ required: true, min: 6 }\"\r\n                   autocomplete=\"new-password\">\r\n            <div class=\"error\" v-if=\"errors.has('newPassword')\">{{errors.first('newPassword')}}</div>\r\n          </div>\r\n\r\n          <div class=\"form-group text-left\">\r\n            <label for=\"matchingPassword\">Enter same password again:</label>\r\n            <input id=\"matchingPassword\" class=\"form-control\" type=\"password\" name=\"matchingPassword\"\r\n                   placeholder=\"Password again\" autocomplete=\"new-password\"\r\n                   v-model=\"matchingPassword\" v-validate=\"{ required: true, min: 6, confirmed: newPassword }\">\r\n            <div class=\"error\" v-if=\"errors.has('matchingPassword')\">{{errors.first('matchingPassword')}}</div>\r\n          </div>\r\n\r\n          <input class=\"btn btn-primary mb-3\" type=\"submit\" value=\"Submit\">\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n    import apiRequests from './../javascript/apiRequests.js';\r\n    import errorHandling from './../javascript/errorHandling.js';\r\n\r\n    export default {\r\n        name: \"PasswordReset\",\r\n        data() {\r\n            return {\r\n                username: '',\r\n                token: '',\r\n                newPassword: '',\r\n                matchingPassword: '',\r\n            };\r\n        },\r\n        methods: {\r\n            register() {\r\n                apiRequests\r\n                    .postRequestToApi('/api/resetPassword', {\r\n                        username: this.username,\r\n                        token: this.token,\r\n                        newPassword: this.newPassword,\r\n                    })\r\n                    .then(() => {\r\n                        this.resetFields();\r\n                        errorHandling.successMsg(\"Password changed!\", 1000);\r\n                    })\r\n                    .catch((error) => {\r\n                            errorHandling.errorMsg(error.response.data.message, 1200)\r\n                        }\r\n                    );\r\n            },\r\n            resetFields() {\r\n                this.username = '';\r\n                this.newPassword = '';\r\n                this.matchingPassword = '';\r\n                this.token = '';\r\n                this.$nextTick(() => this.$validator.reset());\r\n            },\r\n            processForm() {\r\n                this.$validator.validate().then(valid => {\r\n                    if (valid) {\r\n                        this.register();\r\n                    } else {\r\n                        errorHandling.errorMsg(\"The form wasn't filled in properly!\", 1000);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        mounted() {\r\n            this.username = this.$route.query.username;\r\n            this.token = this.$route.query.token;\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}